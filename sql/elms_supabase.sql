
-- ELMS schema for Supabase (PostgreSQL)
-- Safe to run in a fresh Supabase project.
-- Enables tables but does not enable RLS policies yet.
-- After verifying everything works, you should turn on RLS and add policies (see instructions in chat).

-- Drop in dependency order (idempotent)
DROP TABLE IF EXISTS team_assignments CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS leave_balances CASCADE;
DROP TABLE IF EXISTS leave_requests CASCADE;
DROP TABLE IF EXISTS leave_policies CASCADE;
DROP TABLE IF EXISTS system_settings CASCADE;
DROP TABLE IF EXISTS leave_types CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- USERS
CREATE TABLE public.users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id TEXT UNIQUE NOT NULL,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  phone TEXT,
  -- Keep the legacy password column for now if you aren't switching to Supabase Auth yet.
  -- If you will use Supabase Auth, you can drop this column and map to auth.users instead.
  password TEXT,
  role TEXT NOT NULL DEFAULT 'employee' CHECK (role IN ('employee','manager','admin')),
  department TEXT,
  position TEXT,
  leave_balance INTEGER NOT NULL DEFAULT 20,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- LEAVE TYPES
CREATE TABLE public.leave_types (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  description TEXT,
  max_days INTEGER NOT NULL,
  can_carry_over BOOLEAN NOT NULL DEFAULT FALSE,
  carry_over_limit INTEGER NOT NULL DEFAULT 0
);

-- LEAVE REQUESTS
CREATE TABLE public.leave_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  leave_type_id BIGINT NOT NULL REFERENCES public.leave_types(id) ON DELETE RESTRICT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  reason TEXT,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','approved','rejected','cancelled')),
  manager_id BIGINT REFERENCES public.users(id) ON DELETE SET NULL,
  comments TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- trigger to auto-update updated_at
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END; $$;

DROP TRIGGER IF EXISTS trg_leave_requests_updated_at ON public.leave_requests;
CREATE TRIGGER trg_leave_requests_updated_at
BEFORE UPDATE ON public.leave_requests
FOR EACH ROW EXECUTE PROCEDURE set_updated_at();

-- LEAVE BALANCES
CREATE TABLE public.leave_balances (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  leave_type_id BIGINT NOT NULL REFERENCES public.leave_types(id) ON DELETE CASCADE,
  balance INTEGER NOT NULL,
  year INTEGER NOT NULL,
  CONSTRAINT uq_leave_balance UNIQUE (employee_id, leave_type_id, year)
);

-- NOTIFICATIONS
CREATE TABLE public.notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  message TEXT NOT NULL,
  is_read BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- LEAVE POLICIES
CREATE TABLE public.leave_policies (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_name TEXT NOT NULL,
  policy_text TEXT
);

-- SYSTEM SETTINGS (simple key/value store)
CREATE TABLE public.system_settings (
  key TEXT PRIMARY KEY,
  value TEXT
);

-- TEAM ASSIGNMENTS (manager -> employee)
CREATE TABLE public.team_assignments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  manager_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  employee_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  CONSTRAINT uq_team UNIQUE (manager_id, employee_id)
);

-- Sample seed data (optional). Comment out if you will import real data.
INSERT INTO public.leave_types (name, description, max_days, can_carry_over, carry_over_limit) VALUES
('Annual Leave', 'Paid time off work', 20, TRUE, 5),
('Sick Leave', 'Leave for health reasons', 10, FALSE, 0),
('Maternity Leave', 'Leave for new mothers', 90, FALSE, 0),
('Paternity Leave', 'Leave for new fathers', 10, FALSE, 0),
('Emergency Leave', 'Urgent personal matters', 5, FALSE, 0);
